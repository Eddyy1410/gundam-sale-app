package com.huyntd.superapp.gundam_shop.configuration.component;

import com.huyntd.superapp.gundam_shop.service.authentication.AuthenticationService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.simp.stomp.StompCommand;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.messaging.support.ChannelInterceptor;
import org.springframework.messaging.support.MessageHeaderAccessor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
@Slf4j
public class WebsocketAuthInterceptor implements ChannelInterceptor {

    final AuthenticationService authenticationService;

    @Override
    public Message<?> preSend(Message<?> message, MessageChannel channel) {
        log.info("üß© preSend triggered!");
        StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
        if (accessor == null) {
            log.info("‚ö†Ô∏è Kh√¥ng ph·∫£i STOMP frame");
        } else {
            log.info("üß© STOMP command: " + accessor.getCommand());
        }

        // Ch·ªâ x·ª≠ l√Ω khi client g·ª≠i frame CONNECT (k·∫øt n·ªëi ban ƒë·∫ßu)
        if (StompCommand.CONNECT.equals(accessor.getCommand())) {
            log.info("ƒê√£ v√†o khu x·ª≠ l√Ω Frame CONNECT");


            // 1. L·∫•y Header "Authorization" t·ª´ Native Headers
            List<String> authorizationHeaders = accessor.getNativeHeader("Authorization");
            log.info("Authorization headers: {}", authorizationHeaders);
            if (authorizationHeaders != null && !authorizationHeaders.isEmpty()) {
                String fullToken = authorizationHeaders.get(0);

                if (fullToken.startsWith("Bearer ")) {
                    // B·∫Øt ƒë·∫ßu sau index 7 c·ªßa chu·ªói t·ª©c l√† sau l·∫•y chu·ªói sau "Bearer "
                    String jwt = fullToken.substring(7);

                    // Ch·ªâ c·∫ßn g·ªçi getAuthentication, n√≥ s·∫Ω t·ª± verify v√† t√¨m user
                    Authentication authentication = authenticationService.getAuthentication(jwt);
                    log.info("Auth resolved: {}", authentication != null ? authentication.getName() : "null");
                    if (authentication != null) {
                        // 3. Thi·∫øt l·∫≠p Principal v√†o WebSocket Session
                        accessor.setUser(authentication);
                        SecurityContextHolder.getContext().setAuthentication(authentication);
                    }
                    // N·∫øu auth == null, kh√¥ng set user, Spring Security s·∫Ω t·ª´ ch·ªëi
                }
            } else {
                // V·ªõi c√°c frame kh√°c (SEND, SUBSCRIBE, ...), ph·∫£i gi·ªØ nguy√™n user ƒë√£ x√°c th·ª±c
                if (accessor.getUser() == null && SecurityContextHolder.getContext().getAuthentication() != null) {
                    accessor.setUser(SecurityContextHolder.getContext().getAuthentication());
                }
            }
        }

        // Tr·∫£ l·∫°i message ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω
        return message;
    }

    @Override
    public void postSend(Message<?> message, MessageChannel channel, boolean sent) {
        log.info("üì¶ postSend triggered!");
    }

}
